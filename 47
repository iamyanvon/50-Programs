//Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.
//For example:
//Given the below binary tree and sum = 22,
//              5
//             / \
//            4   8
//           /   / \
//          11  13  4
//         /  \      \
//        7    2      1

//Definition for a binary tree node.
public class TreeNode
{
    public int val;
    public TreeNode left;
    public TreeNode right;
    public TreeNode(int x) { val = x; }
}

public class Solution
{
    public bool HasPathSum(TreeNode root, int sum)
    {
        //condition that the tree is null
        if (root == null)
        { return false; }
        //condition that only the root exists, return the root val
        if (root.left == null && root.right == null)
        { return sum == root.val; }
        //else, use recursion to calculate if there are a level, the sum of all nodes is equal to the given sum;
        return this.HasPathSum(root.left, sum - root.val) || this.HasPathSum(root.right, sum - root.val);
    }
}
