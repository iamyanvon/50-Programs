//Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.
//The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2.Please note that your returned answers (both index1 and index2) are not zero-based.
//You may assume that each input would have exactly one solution.
//Input: numbers={2, 7, 11, 15}, target=9
//Output: index1=1, index2=2
using System;
public class Solution
{
    public static int[] TwoSum(int[] numbers, int target)
    {
        //define an array for the two returned indices
        int[] indices = new int[2];
        int m = 0;
        int n = 0;
        //use 2 for loops to find out if there are two numbers summed up as target
        for (int i = 0; i < numbers.Length; i++)
        {
            for (int j = i + 1; j < numbers.Length; j++)
            {
                //if the two numbers found, returned the two order numbers as index number plus 1;
                if (numbers[i] + numbers[j] == target)
                {
                    m = i + 1;
                    n = j + 1;
                }
            }
        }
        //make the returned values as elements of the indices[2] and return it;
        indices[0] = m;
        indices[1] = n;
        return indices;
    }
    public static void Main()
    {
        int[] numbers = { 2, 7, 11, 15};
        int target = 9;
        Console.WriteLine(TwoSum(numbers,target));
    }
}
