//Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.
//Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.
//Example 1: Given nums = [1,1,2], Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.
//It doesn't matter what you leave beyond the returned length.
//Example 2: Given nums = [0,0,1,1,1,2,2,3,3,4],
//Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.
//It doesn't matter what values are set beyond the returned length.

using System;
public class Solution
{
    public static int RemoveDuplicates(int[] nums)
    {
        //if the array is null, return 0;
        if (nums.Length == 0)
            return 0;
        //set the first element for compare
        int i = 0;
        for (int j = 1; j < nums.Length; j++)
        {
            //if the jth element is NOT equal to the ith, i increments, and give the j+1th element to the ith element;
            if (nums[j] != nums[i])
            {
                i++;
                nums[i] = nums[j];
            }
        }
        //traverse all the elements and return the number of unique elements, which is i+1;
        return i + 1;
    }
    public static void Main()
    {
        int[] nums = { 0, 0, 1, 1, 2, 2 };
        Console.WriteLine(RemoveDuplicates(nums));
    }
}
