//Given a binary tree, determine if it is height-balanced.
//For this problem, a height-balanced binary tree is defined as:
//a binary tree in which the depth of the two subtrees of every node never differ by more than 1.
//Example 1:
//Given the following tree [3,9,20,null,null,15,7]:
//    3
//   / \
//  9  20
//    /  \
//   15   7
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution
{
    public bool IsBalanced(TreeNode root)
    {
        //if the root is null, the tree is always balanced;
        if (root == null)
            return true;
        //else, use 3 boolean conditions: left branch is balanced, right branch is balanced, and the absolute value of difference between left branch depth and right branch depth is lower than 2, reutnr true
        else if (this.IsBalanced(root.left)
                && this.IsBalanced(root.right)
                && (Math.Abs(this.GetHeight(root.left) - this.GetHeight(root.right)) < 2))
            return true;
        //everything else, return false;
        else
            return false;
    }
    public int GetHeight(TreeNode root)
    {
        if (root == null)
            return 0;
        return Math.Max(this.GetHeight(root.left), this.GetHeight(root.right)) + 1;
    }
}
